using Mesen.Interop;
using ReactiveUI.Fody.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Mesen.Config
{
	public class PcEngineConfig : BaseConfig<PcEngineConfig>
	{
		[Reactive] public ControllerConfig Port1 { get; set; } = new();
		
		[Reactive] public ControllerConfig Port1A { get; set; } = new();
		[Reactive] public ControllerConfig Port1B { get; set; } = new();
		[Reactive] public ControllerConfig Port1C { get; set; } = new();
		[Reactive] public ControllerConfig Port1D { get; set; } = new();
		[Reactive] public ControllerConfig Port1E { get; set; } = new();

		[Reactive] public RamState RamPowerOnState { get; set; } = RamState.Random;
		[Reactive] public bool PreventSelectRunReset { get; set; } = true;

		[Reactive] public UInt32 Channel1Vol { get; set; } = 100;
		[Reactive] public UInt32 Channel2Vol { get; set; } = 100;
		[Reactive] public UInt32 Channel3Vol { get; set; } = 100;
		[Reactive] public UInt32 Channel4Vol { get; set; } = 100;
		[Reactive] public UInt32 Channel5Vol { get; set; } = 100;
		[Reactive] public UInt32 Channel6Vol { get; set; } = 100;
		[Reactive] public UInt32 CdAudioVolume { get; set; } = 100;
		[Reactive] public UInt32 AdpcmVolume { get; set; } = 100;

		[Reactive] public UInt32[] Palette { get; set; } = new UInt32[512] { 0xFF000000, 0xFF160000, 0xFF350204, 0xFF4B0001, 0xFF6A0407, 0xFF800105, 0xFF9F060B, 0xFFB50309, 0xFF03001A, 0xFF210520, 0xFF37021E, 0xFF560724, 0xFF6C0422, 0xFF8B0928, 0xFFA10625, 0xFFC00B2B, 0xFF0D083D, 0xFF24053B, 0xFF420A40, 0xFF59073E, 0xFF770C44, 0xFF8D0942, 0xFFAC0E48, 0xFFC20B45, 0xFF100957, 0xFF260555, 0xFF450A5B, 0xFF5B0759, 0xFF7A0C5E, 0xFF90095C, 0xFFAF0E62, 0xFFC50B60, 0xFF130972, 0xFF310E77, 0xFF480B75, 0xFF66107B, 0xFF7C0C79, 0xFF9B117F, 0xFFB10E7C, 0xFFD01382, 0xFF1E1194, 0xFF340E92, 0xFF521398, 0xFF691095, 0xFF87159B, 0xFF9E1299, 0xFFBC179F, 0xFFD2139D, 0xFF2011AE, 0xFF360EAC, 0xFF5513B2, 0xFF6B10B0, 0xFF8A15B6, 0xFFA012B3, 0xFFBF17B9, 0xFFD514B7, 0xFF2311C9, 0xFF4116CF, 0xFF5813CC, 0xFF7618D2, 0xFF8C15D0, 0xFFAB1AD6, 0xFFC117D4, 0xFFE01CDA, 0xFF082409, 0xFF1E2107, 0xFF3D260D, 0xFF53230A, 0xFF722810, 0xFF88250E, 0xFFA72A14, 0xFFBD2711, 0xFF0B2423, 0xFF212121, 0xFF3F2627, 0xFF562325, 0xFF74282A, 0xFF8B2528, 0xFFA92A2E, 0xFFBF272C, 0xFF0D243E, 0xFF2C2943, 0xFF422641, 0xFF612B47, 0xFF772845, 0xFF952D4B, 0xFFAC2A48, 0xFFCA2F4E, 0xFF182C60, 0xFF2E295E, 0xFF4D2E64, 0xFF632B61, 0xFF823067, 0xFF982D65, 0xFFB7326B, 0xFFCD2F69, 0xFF1B2D7A, 0xFF312978, 0xFF502E7E, 0xFF662B7C, 0xFF843082, 0xFF9B2D7F, 0xFFB93285, 0xFFD02F83, 0xFF1D2D95, 0xFF3C329B, 0xFF522F98, 0xFF71349E, 0xFF87309C, 0xFFA636A2, 0xFFBC32A0, 0xFFDA37A6, 0xFF2835B7, 0xFF3E32B5, 0xFF5D37BB, 0xFF7334B9, 0xFF9239BF, 0xFFA836BC, 0xFFC73BC2, 0xFFDD38C0, 0xFF2B35D2, 0xFF4132CF, 0xFF6037D5, 0xFF7634D3, 0xFF9439D9, 0xFFAB36D7, 0xFFC93BDC, 0xFFE038DA, 0xFF08400A, 0xFF26450F, 0xFF3D420D, 0xFF5B4713, 0xFF714411, 0xFF904917, 0xFFA64514, 0xFFC54A1A, 0xFF13482C, 0xFF29452A, 0xFF474A30, 0xFF5E472D, 0xFF7C4C33, 0xFF934931, 0xFFA9462F, 0xFFC74B35, 0xFF154846, 0xFF2B4544, 0xFF4A4A4A, 0xFF604748, 0xFF7F4C4E, 0xFF95494B, 0xFFB44E51, 0xFFCA4B4F, 0xFF184861, 0xFF364D67, 0xFF4D4A64, 0xFF6B4F6A, 0xFF814C68, 0xFFA0516E, 0xFFB64E6C, 0xFFD55372, 0xFF235183, 0xFF394D81, 0xFF575287, 0xFF6E4F85, 0xFF8C548B, 0xFFA35188, 0xFFB94E86, 0xFFD7538C, 0xFF25519E, 0xFF3C4D9B, 0xFF5A53A1, 0xFF704F9F, 0xFF8F54A5, 0xFFA551A3, 0xFFC456A8, 0xFFDA53A6, 0xFF2851B8, 0xFF4656BE, 0xFF5D53BC, 0xFF7B58C1, 0xFF9255BF, 0xFFB05AC5, 0xFFC656C3, 0xFFE55CC9, 0xFF3359DA, 0xFF4956D8, 0xFF685BDE, 0xFF7E58DC, 0xFF9455D9, 0xFFB35ADF, 0xFFC957DD, 0xFFE85CE3, 0xFF106412, 0xFF266110, 0xFF456616, 0xFF5B6214, 0xFF79671A, 0xFF906417, 0xFFAE691D, 0xFFC5661B, 0xFF12642D, 0xFF316933, 0xFF476630, 0xFF666B36, 0xFF7C6834, 0xFF9B6D3A, 0xFFB16938, 0xFFCF6F3E, 0xFF156447, 0xFF33694D, 0xFF4A664B, 0xFF686B51, 0xFF7F684E, 0xFF9D6D54, 0xFFB36A52, 0xFFD26F58, 0xFF206C6A, 0xFF366967, 0xFF556E6D, 0xFF6B6B6B, 0xFF897071, 0xFFA06D6F, 0xFFBE7274, 0xFFD56F72, 0xFF226C84, 0xFF41718A, 0xFF576E88, 0xFF76738D, 0xFF8C708B, 0xFFAB7591, 0xFFC1728F, 0xFFDF7795, 0xFF256C9E, 0xFF4471A4, 0xFF5A6EA2, 0xFF7873A8, 0xFF8F70A6, 0xFFAD75AB, 0xFFC472A9, 0xFFE277AF, 0xFF3075C1, 0xFF4672BE, 0xFF6577C4, 0xFF7B73C2, 0xFF9A79C8, 0xFFB075C6, 0xFFCE7ACC, 0xFFE577C9, 0xFF3275DB, 0xFF517AE1, 0xFF6777DF, 0xFF867CE5, 0xFF9C79E2, 0xFFBB7EE8, 0xFFD17BE6, 0xFFF080EC, 0xFF0F7F13, 0xFF2E8419, 0xFF448117, 0xFF63861D, 0xFF79831A, 0xFF988820, 0xFFAE851E, 0xFFCD8A24, 0xFF1A8836, 0xFF318533, 0xFF4F8A39, 0xFF658637, 0xFF848C3D, 0xFF9A883B, 0xFFB98D41, 0xFFCF8A3E, 0xFF1D8850, 0xFF3B8D56, 0xFF528A54, 0xFF708F59, 0xFF878C57, 0xFFA5915D, 0xFFBB8E5B, 0xFFDA9361, 0xFF20886A, 0xFF3E8D70, 0xFF548A6E, 0xFF738F74, 0xFF898C72, 0xFFA89177, 0xFFBE8E75, 0xFFDD937B, 0xFF2A908D, 0xFF418D8B, 0xFF5F9290, 0xFF768F8E, 0xFF949494, 0xFFAA9192, 0xFFC99698, 0xFFDF9395, 0xFF2D90A7, 0xFF4C95AD, 0xFF6292AB, 0xFF8097B1, 0xFF9794AE, 0xFFB599B4, 0xFFCC96B2, 0xFFEA9BB8, 0xFF3090C1, 0xFF4E96C7, 0xFF6492C5, 0xFF8397CB, 0xFF9994C9, 0xFFB899CF, 0xFFCE96CC, 0xFFED9BD2, 0xFF3A99E4, 0xFF5196E2, 0xFF6F9BE8, 0xFF8698E5, 0xFFA49DEB, 0xFFBA99E9, 0xFFD99EEF, 0xFFEF9BED, 0xFF17A31C, 0xFF36A822, 0xFF4CA520, 0xFF6BAA26, 0xFF81A723, 0xFFA0AC29, 0xFFB6A927, 0xFFCCA625, 0xFF1AA336, 0xFF39A93C, 0xFF4FA53A, 0xFF6DAA40, 0xFF84A73E, 0xFFA2AC43, 0xFFB9A941, 0xFFD7AE47, 0xFF25AC59, 0xFF3BA957, 0xFF5AAE5C, 0xFF70AB5A, 0xFF8FB060, 0xFFA5AC5E, 0xFFC3B264, 0xFFDAAE61, 0xFF28AC73, 0xFF46B179, 0xFF5CAE77, 0xFF7BB37D, 0xFF91B07A, 0xFFA8AD78, 0xFFC6B27E, 0xFFDCAE7C, 0xFF2AAC8D, 0xFF49B193, 0xFF5FAE91, 0xFF7EB397, 0xFF94B095, 0xFFB2B59B, 0xFFC9B298, 0xFFE7B79E, 0xFF35B4B0, 0xFF4BB1AE, 0xFF6AB6B4, 0xFF80B3B1, 0xFF9FB8B7, 0xFFB5B5B5, 0xFFD4BABB, 0xFFEAB7B9, 0xFF38B4CA, 0xFF56B9D0, 0xFF6CB6CE, 0xFF8BBBD4, 0xFFA1B8D2, 0xFFB8B5CF, 0xFFD6BAD5, 0xFFECB7D3, 0xFF3AB5E5, 0xFF59BAEB, 0xFF6FB6E8, 0xFF8EBBEE, 0xFFA4B8EC, 0xFFC2BDF2, 0xFFD9BAF0, 0xFFF7BFF5, 0xFF1FC725, 0xFF36C423, 0xFF54C928, 0xFF6BC626, 0xFF89CB2C, 0xFF9FC82A, 0xFFBECD30, 0xFFD4CA2D, 0xFF22C73F, 0xFF38C43D, 0xFF57C943, 0xFF6DC640, 0xFF8CCB46, 0xFFA2C844, 0xFFC1CD4A, 0xFFD7CA48, 0xFF25C859, 0xFF43CD5F, 0xFF59C95D, 0xFF78CF63, 0xFF8ECB61, 0xFFADD067, 0xFFC3CD64, 0xFFE2D26A, 0xFF2FD07C, 0xFF46CD7A, 0xFF64D280, 0xFF7BCF7D, 0xFF99D483, 0xFFAFD181, 0xFFCED687, 0xFFE4D285, 0xFF32D096, 0xFF48CD94, 0xFF67D29A, 0xFF7DCF98, 0xFF9CD49E, 0xFFB2D19B, 0xFFD1D6A1, 0xFFE7D39F, 0xFF35D0B1, 0xFF53D5B7, 0xFF6AD2B4, 0xFF88D7BA, 0xFF9ED4B8, 0xFFBDD9BE, 0xFFD3D6BC, 0xFFF2DBC1, 0xFF40D8D3, 0xFF56D5D1, 0xFF74DAD7, 0xFF8BD7D5, 0xFFA9DCDA, 0xFFC0D9D8, 0xFFDEDEDE, 0xFFF4DBDC, 0xFF42D8EE, 0xFF58D5EB, 0xFF77DAF1, 0xFF8DD7EF, 0xFFACDCF5, 0xFFC2D9F2, 0xFFE1DEF8, 0xFFF7DBF6, 0xFF1FE325, 0xFF3EE82B, 0xFF54E529, 0xFF73EA2F, 0xFF89E72D, 0xFFA7EC33, 0xFFBEE930, 0xFFDCEE36, 0xFF2AEB48, 0xFF40E846, 0xFF5FED4C, 0xFF75EA49, 0xFF94EF4F, 0xFFAAEC4D, 0xFFC9F153, 0xFFDFEE51, 0xFF2DEC62, 0xFF43E860, 0xFF61ED66, 0xFF78EA64, 0xFF96EF6A, 0xFFADEC67, 0xFFCBF16D, 0xFFE1EE6B, 0xFF2FEC7D, 0xFF4EF183, 0xFF64EE80, 0xFF83F386, 0xFF99EF84, 0xFFB7F48A, 0xFFCEF188, 0xFFECF68D, 0xFF3AF49F, 0xFF50F19D, 0xFF6FF6A3, 0xFF85F3A1, 0xFFA4F8A6, 0xFFBAF5A4, 0xFFD9FAAA, 0xFFEFF6A8, 0xFF3DF4BA, 0xFF53F1B7, 0xFF72F6BD, 0xFF88F3BB, 0xFFA6F8C1, 0xFFBDF5BF, 0xFFDBFAC4, 0xFFF2F7C2, 0xFF3FF4D4, 0xFF5EF9DA, 0xFF74F6D7, 0xFF93FBDD, 0xFFA9F8DB, 0xFFC8FDE1, 0xFFDEFADF, 0xFFFCFFE5, 0xFF4AFCF6, 0xFF60F9F4, 0xFF7FFEFA, 0xFF95FBF8, 0xFFB4FFFE, 0xFFCAFDFB, 0xFFE9FFFF, 0xFFFFFFFF };

		public void ApplyConfig()
		{
			ConfigApi.SetPcEngineConfig(new InteropPcEngineConfig() {
				Port1 = Port1.ToInterop(),
				Port1A = Port1A.ToInterop(),
				Port1B = Port1B.ToInterop(),
				Port1C = Port1C.ToInterop(),
				Port1D = Port1D.ToInterop(),
				Port1E = Port1E.ToInterop(),

				RamPowerOnState = RamPowerOnState,
				PreventSelectRunReset = PreventSelectRunReset,

				Channel1Vol = Channel1Vol,
				Channel2Vol = Channel2Vol,
				Channel3Vol = Channel3Vol,
				Channel4Vol = Channel4Vol,
				Channel5Vol = Channel5Vol,
				Channel6Vol = Channel6Vol,
				CdAudioVolume = CdAudioVolume,
				AdpcmVolume = AdpcmVolume,

				Palette = Palette,
			});
		}

		internal void InitializeDefaults(DefaultKeyMappingType defaultMappings)
		{
			List<KeyMapping> mappings = new List<KeyMapping>();
			if(defaultMappings.HasFlag(DefaultKeyMappingType.Xbox)) {
				KeyMapping mapping = new();
				KeyPresets.ApplyXboxLayout(mapping, 0, ControllerType.PceController);
				mappings.Add(mapping);
			}
			if(defaultMappings.HasFlag(DefaultKeyMappingType.Ps4)) {
				KeyMapping mapping = new();
				KeyPresets.ApplyPs4Layout(mapping, 0, ControllerType.PceController);
				mappings.Add(mapping);
			}
			if(defaultMappings.HasFlag(DefaultKeyMappingType.WasdKeys)) {
				KeyMapping mapping = new();
				KeyPresets.ApplyWasdLayout(mapping, ControllerType.PceController);
				mappings.Add(mapping);
			}
			if(defaultMappings.HasFlag(DefaultKeyMappingType.ArrowKeys)) {
				KeyMapping mapping = new();
				KeyPresets.ApplyArrowLayout(mapping, ControllerType.PceController);
				mappings.Add(mapping);
			}

			Port1.Type = ControllerType.PceController;
			Port1.TurboSpeed = 2;
			if(mappings.Count > 0) {
				Port1.Mapping1 = mappings[0];
				if(mappings.Count > 1) {
					Port1.Mapping2 = mappings[1];
					if(mappings.Count > 2) {
						Port1.Mapping3 = mappings[2];
						if(mappings.Count > 3) {
							Port1.Mapping4 = mappings[3];
						}
					}
				}
			}
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	public struct InteropPcEngineConfig
	{
		public InteropControllerConfig Port1;

		public InteropControllerConfig Port1A;
		public InteropControllerConfig Port1B;
		public InteropControllerConfig Port1C;
		public InteropControllerConfig Port1D;
		public InteropControllerConfig Port1E;

		public RamState RamPowerOnState;
		[MarshalAs(UnmanagedType.I1)] public bool PreventSelectRunReset;

		public UInt32 Channel1Vol;
		public UInt32 Channel2Vol;
		public UInt32 Channel3Vol;
		public UInt32 Channel4Vol;
		public UInt32 Channel5Vol;
		public UInt32 Channel6Vol;
		public UInt32 CdAudioVolume;
		public UInt32 AdpcmVolume;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
		public UInt32[] Palette;
	}
}
